swagger: "2.0"

info:
  version: 1.0.0
  title: Datasheet Service
  description: This API  allows the consumer to perform several operations in a table matrix.
schemes:
  - http
host: localhost:3001
basePath: /

paths:
  /Users:
    post:
      tags:
        - Users
      description: Create a new item in the resource User.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User successfully created.
          schema:
            $ref: '#/definitions/UserResponse'
        400:
          description: Bad request. Check the definition documentation.
    get:
      tags:
        - Users
      description: Get all available registered users.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: User(s) was/were found.
          schema:
            type: array
            items: {
              "$ref": "#/definitions/SimpleUser"
            }
        400:
          description: Bad request. Check the definition documentation.
  /Users/{UserID}:
    get:
      tags:
        - Users
      description: Gets the information for a specific UserID
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
      responses:
        200:
          description: The user was found.
          schema:
              $ref: '#/definitions/User'
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: User wasn't found.
    put:
      tags:
        - Users
      description: Update the information for a specific UserID.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        200:
          description: User successfully updated.
          schema:
             $ref: '#/definitions/User'
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: User wasn't found for edit.
  /Users/{UserID}/Datasets:
    post:
      tags:
        - Datasets
      description: Create datasets.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/html
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: dataset
          in: body
          required: true
          schema:
            $ref: '#/definitions/DatasetRequest'
      responses:
        201:
          description: Dataset created successfully.
          schema:
            $ref: '#/definitions/DatasetResponse'
        400:
          description: Bad request. Check the definition documentation.
    get:
      tags:
        - Datasets
      description: Gets all existents datasets of this user.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/html
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
      responses:
        200:
          description: Dataset(s) was/were found.
          schema:
            type: array
            items: {
              "$ref": "#/definitions/Dataset"
            }
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: Dataset not found.
  /Users/{UserID}/Datasets/{DatasetID}:
    get:
      tags:
        - Datasets
      description: Gets the information for a specific DatasetID
      consumes:
        - application/json
        - application/xml
      produces:
        - application/html
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: DatasetID
          in: path
          required: true
          type: string
      responses:
        200:
          description: Dataset found.
          schema:
              $ref: '#/definitions/Dataset'
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: Dataset not found.
    put:
      tags:
        - Datasets
      description: Update a dataset.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/html
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: DatasetID
          in: path
          required: true
          type: string
        - name: dataset
          in: body
          required: true
          schema:
            $ref: '#/definitions/DatasetRequest'
      responses:
        200:
          description: Dataset successfully updated
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: Dataset not found.
    delete:
      tags:
        - Datasets
      description: Delete a specific DatasetID.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/html
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: DatasetID
          in: path
          required: true
          type: string
      responses:
        204:
          description: Dataset sucessfully  deleted.
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: Dataset wasn't found for delete.
  /Users/{UserID}/Macros:
    post:
      tags:
        - Macros
      description: Creates a macro
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: macro
          in: body
          required: true
          schema:
            $ref: '#/definitions/MacroRequest'
      responses:
        201:
          description: Macro was successfully created.
          schema:
              $ref: '#/definitions/Macro'
        400:
            description: Bad request. Check the definition documentation.
    get:
      tags:
        - Macros
      description: Gets all existent macros of current user.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
      responses:
        200:
          description: Macro(s) was/were found.
          schema:
            type: array
            items: {
              "$ref": "#/definitions/Macro"
            }
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: Macro(s) was/were not found.
  /Users/{UserID}/Macros/{MacroID}:
    put:
      tags:
        - Macros
      description: Update a macro.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: UserID
          in: path
          required: true
          type: string
        - name: MacroID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Macro'
      responses:
        200:
          description: Macro successfully updated
        400:
          description: Bad request. Check the definition documentation.
        404:
          description: Macro not found.
  /Stats:
    get:
      tags:
        - Stats
      description: List all operations (ID, MathType and Description) available for a specific statistic math operation.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: Stat(s) available.
          schema:
              $ref: '#/definitions/StatResponse'
        400:
          description: Bad request. Check the definition documentation.
  /Transfs:
    get:
      tags:
        - Transformations
      description: List all operations (ID, MathType and Description) available for a specific transformation math operation.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: Tansoformation(s) available.
          schema:
              $ref: '#/definitions/TransfResponse'
        400:
          description: Bad request. Check the definition documentation.
  /Charts:
    get:
      tags:
        - Charts
      description: Return a chart representation (image binary file) of the dataset.
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: Charts(s) available.
          schema:
              $ref: '#/definitions/Chart'
        400:
          description: Bad request. Check the definition documentation.
  /Users/{UserID}/Datasets/{DatasetID}/Stats?StatID=StatID:
    post:
      tags:
        - Stats
      description: Calculate stat of entire dataset
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
       - name: UserID
         in: path
         required: true
         type: string
       - name: DatasetID
         in: path
         required: true
         type: string
       - name: StatID
         in: query
         required: true
         description: Number of statID
         type: string
       - name: body
         in: body
         required: false
         schema:
          $ref: '#/definitions/StatRequest'
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/StatResponse'
        400:
          description: Bad request. Check the definition documentation.
  /Users/{UserID}/Datasets/{DatasetID}/Transfs?TransfID=TransfID:
    post:
      tags:
        - Transformations
      description: Calculate transformation of a dataset
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
       - name: UserID
         in: path
         required: true
         type: string
       - name: DatasetID
         in: path
         required: true
         type: string
       - name: TransfID
         in: query
         required: true
         type: string
       - name: body
         in: body
         required: false
         schema:
            $ref: "#/definitions/TransfRequest"
      responses:
        202:
          description: Accepted.
          schema:
            $ref: "#/definitions/TransfResponse"
        400:
          description: Bad request. Check the definition documentation.
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /Users/{UserID}/Datasets/{DatasetID}/Macros?MacroID=MacroID:
    post:
      tags:
        - Stats
      description: Calculate macro of entire dataset
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
       - name: UserID
         in: path
         required: true
         type: string
       - name: DatasetID
         in: path
         required: true
         type: string
       - name: MacroID
         in: query
         required: true
         type: string
      responses:
        202:
          description: Accepted.
          schema:
            $ref: "#/definitions/MacroResult"
        400:
          description: Bad request. Check the definition documentation.
  /Users/{UserID}/Results/{ResultID}:
    get:
      tags:
        - Results
      description: Result opertion of a Dataset
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
       - name: UserID
         in: path
         required: true
         type: string
       - name: ResultID
         in: path
         required: true
         type: string
      responses:
        200:
          description: Accepted.
          schema:
            $ref: "#/definitions/Result"
        404:
          description: Macro not found.
definitions:
  Macro:
    type : object
    properties:
      id:
        type: integer
      items:
        type: array
        items: {
            "$ref": "#/definitions/Item"
          }
      description:
        type: string
  MacroRequest:
    type : object
    properties:
      items:
        type: array
        items: {
            "$ref": "#/definitions/Item"
          }
      description:
        type: string
  MacroResult:
    type : object
    properties:
      result_url:
        type: integer
  Item:
    type : object
    properties:
      stat_id:
        type: string
      transf_id:
        type: string
      value:
        type: integer
  TransfRequest:
    type: object
    properties:
      value:
        type: string
  TransfResponse:
    type: object
    properties:
      result_url:
        type: string
  Chart:
    type: object
    properties:
      chart_id:
        type: string
      desc_chart:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  SimpleUser:
    type: object
    properties:
      username:
        type: string
        description: Unique identifier as nickname. e.g. user123
      full name:
        type: string
        description: Your full name.
  User:
    type: object
    properties:
      username:
        type: string
        description: Unique identifier as nickname. e.g. user123
      full name:
        type: string
        description: Your full name.
      password:
        type: string
        description: Your password code.
  UserRequest:
    type: object
    properties:
      full name:
        type: string
        description: Your full name.
  UserResponse:
    type: object
    properties:
      username:
        type: string
        description: Your full name confirming that you logged with sucess.
  Dataset:
    type: object
    properties:
      idDataset:
        type: integer
        description: The qtd. line number of dataset.
      numRows:
        type: integer
        description: The qtd. line number of dataset.
      numCols:
        type: integer
        description: The qtd. column number of dataset.
      values:
        type: array
        items: {
            type: integer
          }
        description: Array of values of dataset.
  DatasetRequest:
    type: object
    properties:
      numRows:
        type: integer
        description: The qtd. line number of dataset.
      numCols:
        type: integer
        description: The qtd. column number of dataset.
      values:
        type: array
        items: {
            type: integer
          }
        description: Array of values of dataset.
  DatasetResponse:
    type: object
    properties:
      dataset_id:
        type: string
        description: Unique identifier representing a specific dataset created.
  Result:
    type: object
    properties:
      transf:
          "$ref": "#/definitions/Dataset"
      stat:
        type: integer
  StatRequest:
    type: object
    properties:
      row:
        type: integer
      col:
        type: integer
  StatResponse:
    type: object
    properties:
      stat_id:
        type: string
        description: Unique identifier representing a specific statistic math id
      result:
        type: integer
        description: Result of the statistical calculation.